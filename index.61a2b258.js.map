{"mappings":"AACC,MAAKA,EAAOC,SAASC,eAAe,eAC/BC,EAAUF,SAASG,cAAc,YACjCC,EAAcJ,SAASG,cAAc,cAE3C,IAAIE,EAAc,GACdC,EAAO,EAIRC,eAAYC,IACX,MACMC,EAAM,qEAA6CC,mBACvDL,mEACgEC,gBAElEK,QAAQC,IAAI,+BAA+BP,eAAyBC,KAEpE,IACE,MACMO,SADiBC,MAAMC,IAAIN,IACXI,KAKnB,GAHDF,QAAMC,IAAI,iBAAkBC,GAGP,IAAnBA,EAAKG,UAKP,OAJAC,SAASC,OAAOC,QACd,iFAEFR,QAAQC,IAAI,oBAKD,IAATN,GACFW,SAASC,OAAOE,QAAQ,oBAAoBP,EAAKG,qBA2BvD,SAAoBK,GAEbV,QAACC,IAAI,oBAAqBS,GAG5B,MAACC,EAASD,EACZE,KACCC,GAAS,uDAEKA,EAAMC,sBAAsBD,EAAME,mHAG1BF,EAAMG,qFAGNH,EAAMI,wFAGHJ,EAAMK,4FAGLL,EAAMM,kEAMjCC,KAAK,IAEL7B,EAAK8B,mBAAmB,YAAaV,GACtCX,QAAMC,IAAI,mC,CArDNqB,CAAWpB,EAAKqB,MAClBvB,QAAQC,IAAI,6BAA6BN,KAGrCO,EAAKG,UApCC,GAoCqBV,GAC7BF,EAAY+B,MAAMC,QAAU,QAC5BzB,QAAQC,IAAI,wDAEZR,EAAY+B,MAAMC,QAAU,OAC5BnB,SAASC,OAAOmB,KACd,8DAEF1B,QAAQC,IAAI,wD,CAEd,MAAO0B,GAED3B,QAAE2B,MAAM,yBAA0BA,GACxCrB,SAASC,OAAOC,QAAQ,gD,EA8C7BpB,EAAIwC,iBAAiB,UAAUC,IAU1B,GATJA,EAAEC,iBACFpC,EAAcmC,EAAEE,OAAOC,YAAYC,MAAMC,OACrClC,QAAIC,IAAI,oCAAqCP,GAEjDC,EAAO,EAVPJ,EAAQ4C,UAAY,GAClBnC,QAAMC,IAAI,oBAWTR,EAAS+B,MAAMC,QAAU,OAGR,KAAhB/B,EAGF,OAFAY,SAASC,OAAO6B,QAAQ,qCACxBpC,QAAQC,IAAI,6CAIdJ,GAAa,IAIfJ,EAAYmC,iBAAiB,SAAS,KACpCjC,GAAQ,EACJK,QAAIC,IAAI,0CAA2CN,GACvDE,GAAa","sources":["src/script.js"],"sourcesContent":["// Selectează elementele relevante din DOM\nconst form = document.getElementById('search-form');\nconst gallery = document.querySelector('.gallery');\nconst loadMoreBtn = document.querySelector('.load-more');\n\nlet searchQuery = '';  // Variabilă pentru a stoca cuvântul cheie de căutare\nlet page = 1;  // Inițializează pagina la 1\nconst perPage = 40;  // Numărul de imagini pe pagină\n\n// Funcție asincronă pentru a obține imaginile de la API-ul Pixabay\nasync function fetchImages() {\n    const API_KEY = '45740320-8998945ab22406472f5d99c94';  // Cheia API pentru autentificare\n    const url = `https://pixabay.com/api/?key=${API_KEY}&q=${encodeURIComponent(\n      searchQuery\n    )}&image_type=photo&orientation=horizontal&safesearch=true&page=${page}&per_page=${perPage}`;\n  \n    console.log(`Fetching images for query: \"${searchQuery}\" on page: ${page}`);\n  \n    try {\n      const response = await axios.get(url);  // Realizează cererea HTTP la API\n      const data = response.data;  // Stochează datele din răspuns\n  \n      console.log('Response data:', data);\n  \n      // Verifică dacă nu s-au găsit imagini\n      if (data.totalHits === 0) {\n        Notiflix.Notify.failure(\n          'Sorry, there are no images matching your search query. Please try again.'\n        );\n        console.log('No images found.');\n        return;\n      }\n  \n      // Afișează notificarea cu numărul total de imagini găsite\n      if (page === 1) {\n        Notiflix.Notify.success(`Hooray! We found ${data.totalHits} images.`);\n      }\n  \n      // Randează imaginile în galerie\n      renderImages(data.hits);\n      console.log(`Images rendered for page: ${page}`);\n  \n      // Verifică dacă mai sunt imagini de afișat pentru a decide dacă arată butonul \"Load more\"\n      if (data.totalHits > perPage * page) {\n        loadMoreBtn.style.display = 'block';\n        console.log('More images available. Showing \"Load more\" button.');\n      } else {\n        loadMoreBtn.style.display = 'none';\n        Notiflix.Notify.info(\n          \"We're sorry, but you've reached the end of search results.\"\n        );\n        console.log('No more images available. Hiding \"Load more\" button.');\n      }\n    } catch (error) {\n      // În caz de eroare la cererea HTTP, se afișează un mesaj în consolă și o notificare de eroare\n      console.error('Error fetching images:', error);\n      Notiflix.Notify.failure('Something went wrong. Please try again later.');\n    }\n  }\n  \n\n// Funcție pentru a randa imaginile în galerie\nfunction renderImages(images) {\n  // Afișează în consolă lista de imagini care urmează să fie randează\n  console.log('Rendering images:', images);\n\n  // Creează marcajul HTML pentru fiecare imagine și îl adaugă în galerie\n  const markup = images\n    .map(\n      image => `\n      <div class=\"photo-card\">\n        <img src=\"${image.webformatURL}\" alt=\"${image.tags}\" loading=\"lazy\" />\n        <div class=\"info\">\n          <p class=\"info-item\">\n            <b>Likes:</b> ${image.likes}\n          </p>\n          <p class=\"info-item\">\n            <b>Views:</b> ${image.views}\n          </p>\n          <p class=\"info-item\">\n            <b>Comments:</b> ${image.comments}\n          </p>\n          <p class=\"info-item\">\n            <b>Downloads:</b> ${image.downloads}\n          </p>\n        </div>\n      </div>\n    `\n    )\n    .join('');  // Concatenează toate cardurile de imagini într-un singur șir de caractere HTML\n\n  gallery.insertAdjacentHTML('beforeend', markup);  // Adaugă imaginile în galerie\n  console.log('Gallery updated with new images.');\n}\n\n// Funcție pentru a șterge conținutul galeriei\nfunction clearGallery() {\n  gallery.innerHTML = '';  // Golește conținutul HTML al galeriei\n  console.log('Gallery cleared.');\n}\n\n// Evenimentul de submit al formularului de căutare\nform.addEventListener('submit', e => {\n  e.preventDefault();  // Previne comportamentul implicit al formularului\n  searchQuery = e.target.searchQuery.value.trim();  // Preia valoarea introdusă în câmpul de căutare\n  console.log('Form submitted with search query:', searchQuery);\n\n  page = 1;  // Resetează pagina la 1 pentru o nouă căutare\n  clearGallery();  // Golește galeria înainte de a afișa noile rezultate\n  loadMoreBtn.style.display = 'none';  // Ascunde butonul \"Load more\"\n\n  // Verifică dacă câmpul de căutare este gol\n  if (searchQuery === '') {\n    Notiflix.Notify.warning('Please enter a search query.');\n    console.log('Search query is empty. Warning displayed.');\n    return;\n  }\n\n  fetchImages();  // Apelează funcția pentru a căuta imaginile\n});\n\n// Evenimentul de click pe butonul \"Load more\"\nloadMoreBtn.addEventListener('click', () => {\n  page += 1;  // Incrementează numărul paginii pentru a încărca mai multe imagini\n  console.log('Load more button clicked. Loading page:', page);\n  fetchImages();  // Apelează funcția pentru a încărca mai multe imagini\n});\n"],"names":["$2aac3885343dc6b2$var$form","document","getElementById","$2aac3885343dc6b2$var$gallery","querySelector","$2aac3885343dc6b2$var$loadMoreBtn","$2aac3885343dc6b2$var$searchQuery","$2aac3885343dc6b2$var$page","async","$2aac3885343dc6b2$var$fetchImages","url","encodeURIComponent","console","log","data","axios","get","totalHits","Notiflix","Notify","failure","success","images","markup","map","image","webformatURL","tags","likes","views","comments","downloads","join","insertAdjacentHTML","$2aac3885343dc6b2$var$renderImages","hits","style","display","info","error","addEventListener","e","preventDefault","target","searchQuery","value","trim","innerHTML","warning"],"version":3,"file":"index.61a2b258.js.map"}